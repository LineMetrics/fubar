== fubar ==
An MQTT message broker written in erlang targeted to support internet scale applications.

== Getting Started ==
1. Getting dependencies and building
	$ make deps
	$ make
	
2. Starting a broker in interactive mode
	$ make test
	
3. Testing
	3.1. Starting a node for client
		$ make client
	
	3.2. Connecting clients (in the erlang shell)
		1> C1 = mqtt_client:start([{client_id, <<"c1">>}]).
		2> C2 = mqtt_client:start([{client_id, <<"c2">>}]).
	
	3.3. Subscribing and publishing messages
		3> C1 ! mqtt:subscribe([{topics, [<<"t1">>]}]).
		4> C2 ! mqtt:publish([{topic, <<"t1">>}, {payload, <<"hello!">>}]).
	
4. Shutting down the broker gracefully.
	(fubar@host)1> fubar:stop().
	(fubar@host)2> q().

== More Features ==
1. Adding a new broker node to existing broker cluster
	$ make test master_node=name@host
	
	Note) If you want to more than one broker node in a computer,
	You have to use different node name and listen port as:
	$ make test master_node=name@host node=other mqtt_port=1884
	
2. Using account control
	Modify {auth, undefined} in src/fubar.app.src as {auth, mqtt_account}.
	Then, call mqtt_account:update/2 as:
	(fubar@host)1> mqtt_account:update(<<"romeo">>, <<"1234">>).
	
3. More parameters for a client
	Full list of client parameters are:
	1> C3 = mqtt_client:start([{hostname, "localhost"},
	                           {port, 1884},
	                           {username, <<"romeo">>},
	                           {password, <<"1234">>},
	                           {client_id, <<"c1">>},
	                           {keep_alive, 60},
	                           clean_session,
	                           {will_topic, <<"will">>},
	                           {will_message, <<"bye-bye">>},
	                           {will_qos, at_least_once},
	                           will_retain]).
	
4. Starting a broker in daemon mode
	Use 'run' instead of 'test'.
	$ make run

5. Accessing shell of a running daemon
	$ make debug
	
6. Dumping log as a text file
	$ make log
	
7. Broker state is preserved
	The broker restores all the state -- accounts, topics and subscriptions - on restart.
	To clear this state, do:
	$ make reset
	
8. Understanding trace logs
	(fubar@host)1> {'PROFILE', <<"c2">>},
	               {"since origin", <<"c1">>, 2.01}	% millisec from c1 to c2
	               {"since from", <<"t1">>, 1.55}	% millisec from t1 to c2
	               {"since via", <<"t1">>, 1.55}	% t1 is the last message handler
	
9. Changing log level
	Uncomment {d, 'DEBUG'} in rebar.config and rebuild everything by:
	$ make clean
	$ make deps
	$ make